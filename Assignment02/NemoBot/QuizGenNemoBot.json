{"thirdPartyDependencies":[],"code":"/** Handle the user message.\n * @param {string} payload the message sent by user\n * @param {AppState} state the state of the app\n * @param {Tool} tools available tools to perform a task\n */\n\nasync function run(payload, state, tools) {\n  if (state.flag === 0){\n    var response = await tools.GenerateQuiz({userMessage: payload}, {memory: tools.getChatHistory(10)});\n  }\n  if (response === \"Lecture\") {\n    tools.reply(`We will proceed with generating quiz from lecture slides.\n    Please list the lecture contents you wish to generate the quiz from.`);\n    state.flag = 1;\n  }\n  if (state.flag === 1) {\n    response = await tools.getLectureChoice({userMessage: payload});\n  }\n  if (response[0] === \"[\") {\n    tools.reply(response);\n    response = await generateQuiz(response);\n    tools.reply(\"converting to markdown\");\n    response = await tools.ConvertToMarkdown({content: response});\n    state.flag = 0;\n  }\n\n  // var quiz = await generateQuiz(JSON.parse(info))\n  // var response = await tools.ConvertToMarkdown({content: quiz});\n  tools.reply(response)\n}\n\n/** Startup.\n * @param {AppState} state the state of the app\n * @param {Tool} tools available tools to perform a task\n */\nasync function startup(state, tools) {\n\n  tools.reply(`Hello. I am a quiz generator. \n  Currently in my database are lecture notes from Module CE4052 Cloud Computing Lecture 1 - 7.\n  If you would like to:\n  - generate quiz related to the lecture notes, please let us know the lecture slides you wish to generate the quiz of.\n  - generate a general quiz, you can specify the subject, difficulty, number of questions and language of the quiz.\n  `);\n  state.flag = 0;\n}\n\n/** Unit test.\n * @param {Test} test define a test case\n * @param {Tool} tools available tools to perform a task\n */\nfunction unitTest(test, tools) {\n  test(\"Test 1\", 1, async (expect) => {\n    expect(true).toBeTrue();\n  });\n}\n\nasync function generateQuiz(info) {\n  var serverUrl = \"https://quiz-generator-6famce7bfq-uc.a.run.app/?\";\n  if (info !== \"[1, 2, 3, 4, 5, 6, 7]\"){\n    serverUrl = serverUrl + \"topicNo=\" + info\n  }\n  // if (info[\"subject\"] !== \"\"){\n  //   serverUrl = serverUrl.concat(\"topic=\", info[\"subject\"], \"&\");\n  // }\n  // if (info[\"difficulty\"] !== \"\"){\n  //   serverUrl = serverUrl.concat(\"diff=\", info[\"difficulty\"], \"&\");\n  // }\n  // if (info[\"questionNo\"] !== \"\"){\n  //   serverUrl = serverUrl.concat(\"num_q=\", info[\"questionNo\"], \"&\");\n  // }\n  // if (info[\"language\"] !== \"\"){\n  //   serverUrl = serverUrl.concat(\"lang=\", info[\"language\"]);\n  // }\n  \n  try {\n    const response = await fetch(serverUrl, {\n      method: 'GET', // or 'POST' if your server requires data to generate the quiz\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    const quizData = await response.text();\n    return quizData;\n    // Process and display your quiz data here\n  } catch (error) {\n    console.error('Error fetching quiz:', error);\n    return error\n  }\n}","llmFunctions":[{"functionName":"ConvertToMarkdown","description":"This function ensures that the content are organized","arguments":["content"],"enableMemory":false,"messageHistory":["memoryPlaceholder",{"role":"user","content":"You are a bot expert in organizing content. \nGroup the set of questions and answers according to their source.\nYou are not allowed to change the content. You are allowed to format it.\nRespond in markdown format."},{"role":"user","content":"{{content}}"}],"stream":false,"parameters":{"maxResponse":4096,"temperature":0,"topP":0.95,"frequencyPenalty":0,"presencePenalty":0},"functions":[]},{"functionName":"detectInfo","description":"Detect the topic, difficulty level, number of questions and language of the quiz wanted to be generated","arguments":["userMessage"],"enableMemory":false,"messageHistory":["memoryPlaceholder",{"role":"user","content":"Your job is to read the previous message and detect whether the subject, difficulty level of the quiz, number of questions to be generated in the quiz and the language of the quiz is defined in the message.\nYou are not allowed to assume any of the parameters if they are not detected.\nif subject of the quiz is not detected, defined it as \"\".\nif difficulty level of the quiz is not detected, defined it as \"\".\nif number of questions is not detected, leave it empty.\nif the language of the quiz is not detected, defined it as \"\".\n\nReply with the template below in JSON valid format: ###\n{ \"subject\": \"\",          //subject of the quiz generated\n \"difficulty\": \"\",        //difficulty level of the quiz\n \"questionNo\" : ,     //integer number of questions, set as null if not defined\n \"language\": \"\"        //language of the quiz, if not detected\n}\n###"},{"role":"user","content":"{{userMessage}}"}],"stream":false,"parameters":{"maxResponse":4096,"temperature":0.7,"topP":0.95,"frequencyPenalty":0,"presencePenalty":0},"functions":[]},{"functionName":"GenerateQuiz","description":"A chat bot that replies according to the previous conversation.","arguments":["userMessage"],"enableMemory":true,"messageHistory":["memoryPlaceholder",{"role":"user","content":"Your job is to read the previous message and detect whether the student wants to generate a quiz through lecture contents or openAI. \nIf the student wants open AI quiz generator, detect whether the subject, difficulty level of the quiz, number of questions to be generated in the quiz and the language of the quiz is defined in the message. You can ask whether the student wants short-answer questions or MCQ.\nIf the student wants to generate quiz through lecture slides, return the string: Lecture\nIf the student wants MCQ, you must return the quiz in this MARKDOWN JSON format:\n[\n    {\n        \"question\": \"Who was the first person to walk on the moon?\",\n          \"responses\": [\n              \"Neil Armstrong\",\n              \"Buzz Aldrin\",\n              \"Michael Collins\",\n              \"Yuri Gagarin\"\n           ],\n           \"correct\": \"Neil Armstrong\"\n    },\n    {\n        \"question\": \"What was the name of the war that took place between the British and the French in North America from 1754 to 1763??\",\n          \"responses\": [\n              \"The French and Indian War\",\n              \"The Seven Years' War\",\n              \"The War of the Austrian Succession\",\n              \"The Great War\"\n           ],\n           \"correct\": \"The French and Indian War\"\n    },\n\n    ...\n]\nIf the student wants Short answer questions, you must return the quiz in this MARKDOWN JSON format:\n[\n    {\n        \"question\": \"Who was the first person to walk on the moon?\",\n           \"correct\": \"Neil Armstrong\"\n    },\n    {\n        \"question\": \"What was the name of the war that took place between the British and the French in North America from 1754 to 1763??\",\n           \"correct\": \"The French and Indian War\"\n    },\n\n    ...\n]\nPlease ensure that you return the full questions and answers."},{"role":"user","content":"{{userMessage}}"}],"stream":false,"parameters":{"maxResponse":4096,"temperature":0.9,"topP":0.95,"frequencyPenalty":0,"presencePenalty":0},"functions":[]},{"functionName":"getLectureChoice","description":"Detect what lecture slides the user wants to generate from","arguments":["userMessage"],"enableMemory":false,"messageHistory":["memoryPlaceholder",{"role":"user","content":"Your job is to ask what lecture slides the user wants to generate the quiz on. \nYou should pay more attention to the numbers in the messages that describes the lecture number. If only one number is specified, it means that the user wants only one lecture to be included in the quiz. '-' signifies range i.e. 1-2 means 1 and 2.\nIf the lecture slides are detected, you are to only return the topic numbers in an array.\nYou can only return it in this format:\n[1, 2, 3]\nor if they want all the topics from Lecture 1 to 7, return in this format:\n[1, 2, 3, 4, 5, 6, 7]"},{"role":"user","content":"{{userMessage}}"}],"stream":false,"parameters":{"maxResponse":4096,"temperature":0.7,"topP":0.95,"frequencyPenalty":0,"presencePenalty":0},"functions":[]}]}